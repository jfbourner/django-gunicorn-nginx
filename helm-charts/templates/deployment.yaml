apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm-charts.fullname" . }}
  labels:
    injector.nsm.nginx.com/auto-inject: enabled
    {{- include "helm-charts.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm-charts.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm-charts.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm-charts.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p /var/www/jackbourner.co.uk/static/myapp
              cp -R myapp/static/myapp/. /var/www/jackbourner.co.uk/static/myapp
              gunicorn --config ./config/gunicorn/dev.py
              sleep 5s
              tail -f /var/log/gunicorn/dev.log
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
          - name: SECRET_KEY
            value: {{ .Values.DJANGO_SECRET_KEY}}
          - name: OPENAI_API_KEY
            value: {{ .Values.OPENAI_API_KEY }}
        #  livenessProbe:
        #    httpGet:
        #      path: /
        #      port: http
        #  readinessProbe:
        #    httpGet:
        #      path: /
        #      port: http
          volumeMounts:
            - name: staticfiles
              mountPath: /var/www/jackbourner.co.uk/static/myapp
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: nginx-sidecar
          image: nginx:1.25.1-alpine-slim
          imagePullPolicy: Always
          securityContext:
            privileged: false
            # Nginx must start as root to bind the proper port in the container.
            allowPrivilegeEscalation: true
            runAsNonRoot: false
          ports:
            - name: http
              containerPort: {{ .Values.sidecar.nginx.port }}
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: staticfiles
              mountPath: /var/www/jackbourner.co.uk/static/myapp
              readOnly: true
          {{ if .Values.sidecar.nginx.probe.enabled }}
          livenessProbe:
            httpGet:
              # When we can access this route, nginx is alive, but it is not ready (ie cannot serve
              # traffic yet).
              path: {{ .Values.sidecar.nginx.probe.path }}
              port: {{ .Values.sidecar.nginx.port }}
            timeoutSeconds: {{ .Values.sidecar.nginx.probe.livenessTimeOut }}
          readinessProbe:
            httpGet:
              # The container cannot be ready (that is accepting traffic) until it can talk to the
              # container. So we need to pass through nginx (with the port) to the container (with
              # the path) to check this.
              # Since it can take a few seconds, we have an initialDelaySeconds.
              path: {{ .Values.sidecar.nginx.probe.path }}
              port: {{ .Values.sidecar.nginx.port }}
            initialDelaySeconds: {{ .Values.sidecar.nginx.probe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.sidecar.nginx.probe.livenessTimeOut }}
          {{- end }}
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: staticfiles
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
